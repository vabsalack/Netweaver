name: release

on:
  push:
    branches:
      - main
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "netweaver"
  # OWNER: "<OWNER>"
  # TAP_NAME: "<TAP_NAME>"

jobs:
  tag_details:
    name: Job 1 Extract suffix & version from tag
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: step 1 checkout triggered commit
        uses: actions/checkout@v4

      - name: step 2 Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}') 
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Tag name is $TAG_NAME"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
          else
            echo "No tag found"
            exit 1
          fi

  check_pypi:
    name: Job 2 Fetch package info from live pypi & compare versions
    needs: tag_details
    runs-on: ubuntu-latest
    steps:
      - name: step 1 Fetch version info from live PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: step 2 Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.tag_details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  build_and_upload:
    name: Job 3 build package & upload artifacts
    needs: [tag_details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - name: step 1 checkout triggered commit
        uses: actions/checkout@v4

      - name: step 2 Install uv
        uses: astral-sh/setup-uv@v6

    #   - name: "Set up Python"
    #     uses: actions/setup-python@v6
    #     with:
    #         python-version-file: "pyproject.toml"
    #         python-version: "3.12"

    #   - name: Set project version with uv
    #     run: |
    #       uv version ${{ needs.tag_details.outputs.new_version }}

    #   - name: Install the project
    #     run: uv sync --locked --all-extras --dev

      - name: step 3 Build source and wheel distribution
        run: |
          uv build

      - name: step 4 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Job 4 Upload release to live PyPI
    needs: [build_and_upload, tag_details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: step 1 checkout pyproject.toml file only
        uses: actions/checkout@v4
        with:
         sparse-checkout: |
           pyproject.toml
         sparse-checkout-cone-mode: false

      - name: step 2 Install uv
        uses: astral-sh/setup-uv@v6
        
      - name: step 3 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

    #   - name: Publish distribution to PyPI using pypa action
    #     uses: pypa/gh-action-pypi-publish@release/v1

      - name: step 4 Publish distribution to PyPI using uv
        run: |
          uv publish --index pypi

  github_release:
    name: Job 5 Create GitHub Release
    needs: [build_and_upload, tag_details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: step 1 Checkout triggered commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: step 2 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: step 3 Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create v${{ needs.tag_details.outputs.tag_name }} dist/* --title "v${{ needs.tag_details.outputs.tag_name }}" --generate-notes
